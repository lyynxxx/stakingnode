#!/usr/sbin/nft -f

# Flush existing rules and set default policies
flush ruleset

define allowed_icmp_types = { echo-reply, echo-request }
define host_nic="enp0s1"

# Filtering traffic at the network device (interface) level. This table allows you very low-level filtering, such as early packet filtering, ingress and egress filtering, and handling specific interface-related conditions. Can pre-filter traffic on a bridge, to defend all vms too.
table netdev filter {
        chain ingress {
                type filter hook ingress device $host_nic priority -500; policy accept;
                ip frag-off & 0x1fff != 0 counter packets 0 bytes 0 drop comment "Drop all fragments"
                tcp flags & (fin | syn | rst | psh | ack | urg) == 0x0 counter packets 0 bytes 0 drop comment "Drop NULL packets"
                tcp flags & (fin | syn | rst | psh | ack | urg) == fin | syn | rst | psh | ack | urg counter packets 0 bytes 0 drop comment "Drop XMAS packets"
                tcp flags syn tcp option maxseg size 1-535 counter packets 0 bytes 0 drop comment "Drop uncommon MSS values"
                ip saddr { 0.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0-255.255.255.255 } counter packets 0 bytes 0 drop
        }
}

table inet firewall {
        # Specifies that the default policy for this chain is to drop packets that do not match any rules explicitly.
        chain input {
                type filter hook input priority filter; policy drop;
                iif lo accept comment "Accept any localhost traffic"
                ct state established,related accept comment "Accept traffic originated from us"
                icmp type $allowed_icmp_types limit rate 1/second accept comment "Limit ICMP echo-request packets to 1 per second and accept"
                meta l4proto udp ct state new jump udp_chain comment "Jump to chain 'udp_chain' for new UDP connections"
                meta l4proto tcp tcp flags & (fin | syn | rst | ack) == syn ct state new jump tcp_chain comment "Jump to chain 'tcp_chain' for new,valid TCP connections"
                meta l4proto udp drop comment "Drops all UDP packets that do not match the earlier rule to jump.."
                meta l4proto tcp reject with tcp reset comment "Reject all other TCP packets with a TCP reset"
                counter packets 0 bytes 0 drop comment "Log and drop all other packets"
        }

        # Drop everything forwarded to us. We do not forward. That is routers job.
        chain forward {
                type filter hook forward priority filter; policy drop;
        }

        # Accept every outbound connection
        chain output {
                type filter hook output priority filter; policy accept;
        }

        chain tcp_chain {
                tcp dport 2992 counter packets 0 bytes 0 limit rate 4/second accept
        }

        chain udp_chain {
        }
}

table inet mangle {
        chain prerouting {
                type filter hook prerouting priority mangle; policy accept;
                ct state invalid counter packets 0 bytes 0 drop
                tcp flags & (fin | syn | rst | ack) != syn ct state new counter packets 0 bytes 0 drop
        }
}
